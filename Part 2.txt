
SOFTWARE DEVELOPMENT METHODS, PROCESSES, AND TECHNIQUES

OVERVIEW OF AGILE MINDSET

Choosing the appropriate technique in software development is critical, with significant weight in the results, especially when developing vital platforms such as Customer Relationship Management (CRM) software for financial organisations. Agile concept proficiency is an essential component in current software development approaches. Agile values include adaptability, teamwork, client input, incremental development, and the capacity to respond quickly to changes. This concept promotes customer-focused approaches and continual growth, easily fitting into today's ever-changing markets and customer expectations.

The Agile methodology has emerged as the go-to solution for project management amid the increased uncertainty, particularly in the ever-changing world of software development (Abbas et al., 2008). It's an approach designed specifically to deal with the issues caused by unpredictability in project requirements and technical landscapes. Schwaber and Sutherland (2011, p. 68) highlight Scrum, an Agile framework, emphasising its differentiating features such as team flexibility, unrestricted innovation during iterations, and an optimised model aimed to boost productivity. These characteristics highlight the essence of Agile techniques, emphasising adaptability and innovative problem-solving as critical components of project success.

Studies such as those carried out by Serrador and Pinto (2015) provide compelling evidence for the efficacy of Agile techniques. Their study explicitly demonstrates how agility affects key project elements, such as stakeholder satisfaction, efficiency, and the overall perception of project success. This empirical evidence not only reinforces Agile's theoretical foundation but also emphasises its practical importance in achieving tangible, beneficial project outcomes.

Embracing Agile is a way of thinking that emphasises adaptability and swift responses to change, rather than merely altering the way projects are managed. Agile becomes a useful tool for overcoming uncertainty and quickly adjusting to changing needs, eventually leading to improved project outputs, with shown success and real-world examples.


SCRUM PROCESS

Scrum is an iterative and incremental agile software development framework that divides work into manageable sprints. Feedback is gathered throughout the project, allowing for continuous improvement (Larcan & Basili, 2002).

Key Elements of Scrum

1. Product Backlog: A prioritised list of product features and functionalities.
2. Sprint Backlog: A subset of the Product Backlog selected for development during each sprint.
3. Scrum Team: A self-organising and cross-functional team responsible for developing the product.
4. Scrum Master: Facilitates the Scrum process and eliminates impediments.
5. Product Owner: Represents stakeholders and ensures product requirements are met.
 
Scrum Process

1. Sprint Planning: Selects items from the Product Backlog for development during the sprint.
2. Daily Scrum: Daily team meetings for progress tracking, problem identification, and sprint plan adjustments.
3. Sprint Review: Demonstrates completed work to stakeholders for feedback.
4. Sprint Retrospective: Reflects on the sprint and identifies areas for improvement.

(Schwaber & Sutherland, 2009)
 

WATERFALL METHODOLOGY

Waterfall is a sequential linear software development process model used for projects with well-defined requirements and a clear scope (Royce, 1970).

Key Elements of Waterfall

1. Requirements: A detailed list of product features and functionality.
2. Design: A detailed plan for product implementation.
3. Implementation: Development based on the design.
4. Testing: Verification and validation of the product.
5. Deployment: Release to production.

Waterfall Process

1. Requirements: Gathered and documented at the beginning.
2. Design: Created based on the requirements.
3. Implementation: Developed according to the design.
4. Testing: Ensures product meets requirements.
5. Deployment: Released to production.

(Royce, 1970)


Guidelines for Determining Scrum or Waterfall Suitability:
Clarification of Project Requirements:
Choosing the best software development technique, whether Scrum or Waterfall, requires careful evaluation of numerous crucial variables. To begin, the clarity of project requirements is critical. If the requirements are well-defined and unlikely to alter much, Waterfall's linear and sequential structure may be more suited. Scrum's iterative and adaptive methodology, on the other hand, allows for ongoing modifications throughout the development process if the project contains evolving or unknown needs. Waterfall may be more appropriate if the project requirements are well-defined and unlikely to alter dramatically. Scrum is ideal if the project has changing or unknown requirements since it accommodates modifications throughout the development process. .
Size and complexity of the project:
The size and complexity of the project are also important factors in approach selection. Waterfall's planned stages may give a clear and achievable approach for smaller projects with simple criteria. Scrum's capacity to break down work into smaller, more manageable chunks, on the other hand, provides for greater flexibility and adaptation, making it a better alternative for larger and more complicated projects Waterfall's linear method may be better suitable for smaller projects with simple criteria. Scrum is better suited for larger, more complicated projects where breaking work down into manageable pieces is advantageous.
Client Participation and Collaboration:
Client participation and desires for collaboration are distinct aspects. Scrum fosters a dynamic relationship with clients by encouraging ongoing client involvement and feedback throughout the development lifecycle. Waterfall, on the other hand, includes clients largely at the start and finish of the project, with little participation during the development period. Scrum is the appropriate method when constant customer participation and input are required, especially when needs may change. Waterfall may be more appropriate if clients are only accessible for input at the beginning and conclusion of the project.
Flexibility and Adaptability:
The Agile mentality, particularly Scrum, is built on adaptation and flexibility. This style accepts change and allows for modifications in response to changing needs. Waterfall, on the other hand, has a strict structure that makes it less adaptable to adjustments after a phase has begun, emphasizing adherence to the initial project plan. Scrum's flexibility enables for adjustments throughout the development lifecycle if the project environment is dynamic and changes are foreseen. Waterfall's organized method may be more suited if the project environment is stable and alterations are discouraged after the project begins.
 
Risk Tolerance:
Another crucial factor to consider is the project's risk tolerance. Scrum emphasizes continuous risk management throughout the development process, responding quickly to emergent difficulties. Waterfall, on the other hand, concentrates on risk identification and mitigation in the early phases, with less flexibility for ongoing modifications. Scrum's iterative nature provides for continual risk management if there is a high tolerance for tolerating risks and uncertainty. Waterfall's organized phases may be more appropriate if the project requires early risk assessment and mitigation.


Delineating Differences Between Agile (Scrum) and Waterfall Methodologies:
Development Approach:
Scrum (Agile): Scrum's incremental and iterative nature entails providing tiny, functional increments in short sprint cycles. This method enables ongoing development and modification depending on input obtained after each cycle.
Waterfall: Waterfall is a sequential and linear development process that moves through discrete phases such as requirements, design, implementation, testing, and deployment. Each step must be completed before proceeding to the next, resulting in a more organized but less adaptable framework.
Flexibility and Change Management:
Scrum (Agile): Throughout the project, Scrum accepts change, allowing for flexibility and adaptation to changing requirements. It acknowledges that requirements may change, and that the development process should adapt to those changes.
 
Waterfall: Once a phase is completed, it is resistant to adjustments. This might make accommodating changing needs or responding to changes that may happen throughout the development process difficult.
Client Involvement:
Scrum (Agile): Scrum supports ongoing client cooperation and solicits input at regular intervals to ensure that the product meets the expectations of the client. This iterative process allows for modifications depending on client feedback.
Waterfall: In Waterfall, client interaction is generally centered at the beginning and conclusion of the project. During the development period, there is less contact, which may result in less frequent feedback and revisions.
Risk Management:
Scrum (Agile): Throughout the project, Scrum identifies and mitigates risks. Scrum's iterative structure enables the early discovery and resolution of possible issues, promoting a proactive risk management strategy.
Waterfall: Waterfall identifies and addresses risks early in the project's life cycle. Waterfall's organized style may provide less flexibility for continual modifications in response to evolving concerns.
Scrum (Agile): Scrum produces functioning software in small increments across short iteration cycles. This method produces concrete results at the conclusion of each sprint, allowing for regular evaluations of progress and functionality.
Delivery Timeframe:
Waterfall: At the conclusion of the project, Waterfall produces a full product. While this strategy produces a thorough end product, it may take longer to see concrete results, thus delaying customer input and adaption.
 
Finally, recognizing the intricacies of these distinctions is critical for making educated decisions in software development project management. Scrum or Waterfall should be chosen based on project-specific considerations such as the nature of the requirements, the amount of flexibility required, client engagement preferences, risk management techniques, and target delivery timelines.


